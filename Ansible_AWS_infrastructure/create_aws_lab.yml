---
- name: Play to create EC2 resources and finally a RHEL 8 instance.
  hosts: localhost
  vars:
    aws_region: us-east-2
    aws_instance_type: t2.micro
    aws_instance_rhel8_id: ami-0ba62214afa52bec7
    aws_instance_windows2019_id: ami-0c4a11a8d0e503812
    aws_instance_debian_id: ami-089fe97bc00bff7cc
    aws_instance_ubuntu_id: ami-0fb653ca2d3203ac1
    aws_key_pair_name: demo
    aws_client_name: myCompany

  tasks:
    - name: "1 - Task to create {{ aws_client_name }} VPC"
      amazon.aws.ec2_vpc_net:
        name: ansible_tower_vpc
        cidr_block: 10.10.0.0/16
        region: "{{ aws_region }}"
        tenancy: default
      register: ansible_tower_vpc

    - name: "2 - Create an Internet Gateway and associate to the {{ aws_client_name }} VPC"
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ ansible_tower_vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
      register: ansible_tower_igw

    - name: "3 - Create a subnet in the {{ aws_client_name }} VPC"
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ ansible_tower_vpc.vpc.id }}"
        cidr: 10.10.0.0/20
        region: "{{ aws_region }}"
      register: ansible_tower_subnet

    - name: "4 - Set up public {{ aws_client_name }} subnet route table"
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ ansible_tower_vpc.vpc.id }}"
        region: "{{ aws_region }}"
        subnets:
          - "{{ ansible_tower_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ ansible_tower_igw.gateway_id }}"

    - name: "5 - Task to create AWS security groups for {{ aws_client_name }}"
      amazon.aws.ec2_group:
        name: ansible_tower_sg
        description: AWS security group for Ansible Tower demostration
        vpc_id: "{{ ansible_tower_vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 8080
              - 443
              - 3389
              - 5986
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all connections on port 22

    - name: Provisioning EC2
      block:
        - name: "6.1 - Provision RHEL8.4 nodes"
          amazon.aws.ec2_instance:
            instance_type: "{{ aws_instance_type }}"
            image: "{{ aws_instance_rhel8_id }}"
            region: "{{ aws_region }}"
            count: "{{ number_of_rhels }}"
            wait: yes
            key_name: "{{ aws_key_pair_name }}"
            assign_public_ip: yes
            group: ansible_tower_sg
            vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
            instance_tags:
              Name: RHEL8
              Type: Linux

        - name: "6.2 - Provision Debian nodes"
          amazon.aws.ec2_instance:
            instance_type: "{{ aws_instance_type }}"
            image: "{{ aws_instance_debian_id }}"
            region: "{{ aws_region }}"
            count: "{{ number_of_debians }}"
            wait: yes
            key_name: "{{ aws_key_pair_name }}"
            assign_public_ip: yes
            group: ansible_tower_sg
            vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
            instance_tags:
              Name: Debian
              Type: Linux

        - name: "6.3 - Provision Windows nodes"
          amazon.aws.ec2_instance:
            instance_type: "{{ aws_instance_type }}"
            image: "{{ aws_instance_windows2019_id }}"
            region: "{{ aws_region }}"
            count: "{{ number_of_windows }}"
            wait: yes
            key_name: "{{ aws_key_pair_name }}"
            assign_public_ip: yes
            group: ansible_tower_sg
            vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
            instance_tags:
              Name: Windows2019
              Type: Windows

        - name: "6.4 - Provision Ubuntu nodes"
          amazon.aws.ec2_instance:
            instance_type: "{{ aws_instance_type }}"
            image: "{{ aws_instance_ubuntu_id }}"
            region: "{{ aws_region }}"
            count: "{{ number_of_ubuntus }}"
            wait: yes
            key_name: "{{ aws_key_pair_name }}"
            assign_public_ip: yes
            group: ansible_tower_sg
            vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
            instance_tags:
              Name: Ubuntu
              Type: Linux

    #- name: "6 - Task to provision a/an {{ aws_client_name }}  RHEL 8 EC2 instance"
    #  amazon.aws.ec2_instance:
    #    count: 3
    #    instance_type: "{{ aws_instance_type }}"
    #    image_id: "{{ aws_instance_rhel8_id }}"
    #    region: "{{ aws_region }}"
    #    wait: yes
    #    key_name: "{{ aws_key_pair_name }}"
    #    network:
    #      assign_public_ip: yes
    #    security_group: ansible_tower_sg
    #    vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
    #    tags:
    #      Name: RHEL81
    #      Type: Linux
    #  register: ansible_tower_instance

    #- name: "show {{ aws_client_name }} RHEL 8 instance details - debug output"
    #  debug:
    #    msg: "The RHEL8 instance is accessible at {{ ansible_tower_instance.instances[0].public_ip }}"

    #- name: "Task to provision a/an {{ aws_client_name }}  Debian EC2 instance"
    #  amazon.aws.ec2_instance:
    #    region: "{{ aws_region }}"
    #    key_name: "{{ aws_key_pair_name }}"
    #    instance_type: "{{ aws_instance_type }}"
    #    image: "{{ aws_instance_debian_id }}"
    #    wait: yes
    #    group: ansible_tower_sg
    #    count: 2
    #    vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
    #    assign_public_ip: yes
    #    tags:
    #      Name: Debian
    #      Type: Linux
    #  register: ansible_tower_instance

    #- name: "show {{ aws_client_name }} Debian 8 instance details - debug output"
    #  debug:
    #    msg: "The Debian instance is accessible at {{ ansible_tower_instance.instances[0].public_ip }}"

    #- name: "Task to provision a/an {{ aws_client_name }}  Windows EC2 instance"
    #  amazon.aws.ec2_instance:
    #    region: "{{ aws_region }}"
    #    key_name: "{{ aws_key_pair_name }}"
    #    instance_type: "{{ aws_instance_type }}"
    #    image: "{{ aws_instance_windows2019_id }}"
    #    wait: yes
    #    group: ansible_tower_sg
    #    count: 2
    #    vpc_subnet_id: "{{ ansible_tower_subnet.subnet.id }}"
    #    assign_public_ip: yes
    #    tags:
    #      Name: Windows2019
    #      Type: Windows
    #  register: ansible_tower_instance
#
#- name: "show {{ aws_client_name }} Debian 8 instance details - debug output"
#  debug:
#    msg: "The Windows instance is accessible at {{ ansible_tower_instance.instances[0].public_ip }}"
